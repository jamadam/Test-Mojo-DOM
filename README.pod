=head1 NAME

Test::Mojo::Dom - Dom test

=head1 SYNOPSIS

use Test::Mojo::Dom;
    
    use Test::More tests => 35;
    
    my $t = Test::Mojo::Dom->new(MyApp->new);
    $t->get_ok('/')
        ->status_is(200)
        ->dom_inspector(sub {
            my $t = shift;
            $t->at('a')
                ->attr_is('href', '../')
                ->attr_isnt('href', './')
                ->attr_like('href', qr'\.\./')
                ->attr_unlike('href', qr'\.\./a')
                ->text_is('some link')
                ->text_isnt('some link2')
                ->text_like(qr'some')
                ->text_unlike(qr'some2')
                ->has_attr('href')
                ->has_attr('empty')
                ->has_attr_not('not_exists');
            $t->at('a')->get(1)
                ->text_is('some link2');
            $t->at('a:nth-child(2)')
                ->text_is('some link2');
            $t->at('a')->each(sub {
                my $t = shift;
                $t->text_like(qr{.});
                $t->text_unlike(qr{a});
                $t->attr_like('href', qr{.});
                $t->attr_unlike('href', qr{a});
            });
            $t->at('a')->parent->attr_is('id', 'some_p');
            $t->at('a')->parent->parent->attr_is('id', 'wrapper');
            $t->at('#some_p')->has_child('a');
            $t->at('#some_p2')->has_child_not('a');
            
            $t->at('#some_img')->has_class('class1');
            $t->at('#some_img')->has_class('class2');
            $t->at('#some_img')->has_class('class3');
            $t->at('#some_img')->has_class_not('class4');
        });

=head1 DESCRIPTION

This is a test tool for Mojo apps on dom structure.

=head1 METHODS

=head2 Test::Mojo::Dom Class

=head3 Test::Mojo::Dom->dom_inspector($code_ref)

  $t->dom_inspector(sub {
    my $inspector = shift;
  });

=head2 Test::Mojo::Dom::Inspector Class

=head3 Test::Mojo::Dom::Inspector->new($dom)

This is called automatcially.

=head3 $instance->at($selector)

=head3 $instance->children($selector)

=head3 $instance->each($cb)

=head3 $instance->get($number)

=head3 $instance->find($selector)

=head3 $instance->parent()

=head3 $instance->root()

=head3 $instance->text_is($expected, $description)

=head3 $instance->text_isnt($expected, $description)

=head3 $instance->text_like($expected, $description)

=head3 $instance->text_unlike($expected, $description)

=head3 $instance->attr_is($name, $expected, $description)

=head3 $instance->attr_isnt($name, $expected, $description)

=head3 $instance->attr_like($name, $expected, $description)

=head3 $instance->attr_unlike($name, $expected, $description)

=head3 $instance->has_attr($name, $description)

=head3 $instance->has_attr_not($name, $description)

=head3 $instance->has_child($selector, $description)

=head3 $instance->has_child_not($selector, $description)

=head3 $instance->has_class($name, $description)

=head3 $instance->has_class_not($name, $description)

=head1 SEE ALSO

L<Mojolicious>

=head1 AUTHOR

Sugama Keita, E<lt>sugama@jamadam.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2012 by Sugama Keita.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
